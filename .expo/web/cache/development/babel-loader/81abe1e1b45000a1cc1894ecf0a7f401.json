{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { WebView } from \"react-native-webview\";\nimport Constants from \"expo-constants\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BACKGROUND_COLOR = \"#FFFFFF\";\nvar DEVICE_WIDTH = Dimensions.get(\"window\").width;\nvar DEVICE_HEIGHT = Dimensions.get(\"window\").height;\nvar ANDROID_BAR_HEIGHT = Platform.OS === \"android\" ? Constants.statusBarHeight : 0;\nexport default function App(props) {\n  var WEBVIEW = useRef();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      backButtonEnabled = _useState4[0],\n      setBackButtonEnabled = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isConnected = _useState6[0],\n      setConnected = _useState6[1];\n\n  function webViewLoaded() {\n    setLoading(false);\n  }\n\n  function onNavigationStateChange(navState) {\n    setBackButtonEnabled(navState.canGoBack);\n  }\n\n  useEffect(function () {\n    function backHandler() {\n      if (backButtonEnabled) {\n        WEBVIEW.current.goBack();\n        return true;\n      }\n    }\n\n    BackHandler.addEventListener(\"hardwareBackPress\", backHandler);\n    return function () {\n      return BackHandler.removeEventListener(\"hardwareBackPress\", backHandler);\n    };\n  }, [backButtonEnabled]);\n  useEffect(function () {\n    var netInfroSubscribe = NetInfo.addEventListener(function (state) {\n      setConnected(state.isConnected);\n\n      if (!state.isConnected) {\n        alert(\"No connection\");\n      }\n    });\n    return function () {\n      return NetInfo.removeEventListener(state);\n    };\n  }, []);\n  return _jsxs(SafeAreaView, {\n    style: {\n      flex: 1,\n      backgroundColor: BACKGROUND_COLOR\n    },\n    children: [_jsx(View, {\n      style: {\n        height: ANDROID_BAR_HEIGHT,\n        backgroundColor: BACKGROUND_COLOR\n      }\n    }), (loading || !isConnected) && _jsx(View, {\n      style: {\n        backgroundColor: BACKGROUND_COLOR,\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        zIndex: 10,\n        width: DEVICE_WIDTH,\n        height: DEVICE_HEIGHT + ANDROID_BAR_HEIGHT,\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: _jsx(Image, {\n        source: require(\"./assets/icon.png\")\n      })\n    }), isConnected && _jsx(WebView, {\n      onLoad: webViewLoaded,\n      ref: WEBVIEW,\n      useWebKit: true,\n      onNavigationStateChange: onNavigationStateChange,\n      source: {\n        uri: \"https://www.fieldfx.com\"\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/joneskids/Documents/Tommy/Mobile-Wrapper/App.js"],"names":["React","useEffect","useState","useRef","WebView","Constants","NetInfo","BACKGROUND_COLOR","DEVICE_WIDTH","Dimensions","get","width","DEVICE_HEIGHT","height","ANDROID_BAR_HEIGHT","Platform","OS","statusBarHeight","App","props","WEBVIEW","loading","setLoading","backButtonEnabled","setBackButtonEnabled","isConnected","setConnected","webViewLoaded","onNavigationStateChange","navState","canGoBack","backHandler","current","goBack","BackHandler","addEventListener","removeEventListener","netInfroSubscribe","state","alert","flex","backgroundColor","position","top","left","zIndex","alignItems","justifyContent","require","uri"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport {Platform, BackHandler, Dimensions, SafeAreaView, View, Image} from \"react-native\";\nimport { WebView } from \"react-native-webview\";\nimport Constants from \"expo-constants\";\nimport NetInfo from \"@react-native-community/netinfo\";\nconst BACKGROUND_COLOR = \"#FFFFFF\";\nconst DEVICE_WIDTH = Dimensions.get(\"window\").width;\nconst DEVICE_HEIGHT = Dimensions.get(\"window\").height;\nconst ANDROID_BAR_HEIGHT = Platform.OS === \"android\" ? Constants.statusBarHeight : 0;\n\nexport default function App(props) {\n  const WEBVIEW = useRef();\n  const [loading, setLoading] = useState(true);\n  const [backButtonEnabled, setBackButtonEnabled] = useState(false);\n  const [isConnected, setConnected] = useState(true);\n\n  function webViewLoaded() {\n    setLoading(false);\n  }\n\n  function onNavigationStateChange(navState) {\n    setBackButtonEnabled(navState.canGoBack);\n  }\n\n  useEffect(() => {\n    function backHandler() {\n      if (backButtonEnabled) {\n        WEBVIEW.current.goBack();\n        return true;\n      }\n    }\n\n    BackHandler.addEventListener(\"hardwareBackPress\", backHandler);\n\n    return () => BackHandler.removeEventListener(\"hardwareBackPress\", backHandler);\n  }, [backButtonEnabled]);\n\n  useEffect(() => {\n    const netInfroSubscribe = NetInfo.addEventListener((state) => {\n      setConnected(state.isConnected);\n      if (!state.isConnected) {\n        alert(\"No connection\");\n      }\n    });\n\n\n\n    return () => NetInfo.removeEventListener((state));\n\n  },[]);\n  \n  return (\n    <SafeAreaView\n      style={{\n        flex: 1,\n        backgroundColor: BACKGROUND_COLOR,\n      }}\n    >\n      <View\n        style={{\n          height: ANDROID_BAR_HEIGHT,\n          backgroundColor: BACKGROUND_COLOR,\n        }}\n      />\n      {(loading || !isConnected) && (\n        <View\n          style={{\n            backgroundColor: BACKGROUND_COLOR,\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            zIndex: 10,\n            width: DEVICE_WIDTH,\n            height: DEVICE_HEIGHT + ANDROID_BAR_HEIGHT,\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Image source={require(\"./assets/icon.png\")}/>\n        </View>\n      )}\n      {isConnected && (\n        <WebView\n          onLoad={webViewLoaded}\n          ref={WEBVIEW}\n          useWebKit={true}\n          onNavigationStateChange={onNavigationStateChange}\n          source={{ uri: \"https://www.fieldfx.com\" }}\n        />\n      )}\n    </SafeAreaView>\n  )\n}"]},"metadata":{},"sourceType":"module"}